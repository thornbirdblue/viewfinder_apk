// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ImageFingerprint.proto

package co.viewfinder.proto;

public final class ImageFingerprintPB {
  private ImageFingerprintPB() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface ImageFingerprintOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated bytes terms = 1;
    /**
     * <code>repeated bytes terms = 1;</code>
     *
     * <pre>
     * An image fingerprint is composed of a number of terms: 160-bit binary
     * strings. Each term is indexed so that a match on any term is considered a
     * match of the images. There might be multiple terms for an image if we were
     * unable to robustly normalize the image orientation.
     * </pre>
     */
    java.util.List<com.google.protobuf.ByteString> getTermsList();
    /**
     * <code>repeated bytes terms = 1;</code>
     *
     * <pre>
     * An image fingerprint is composed of a number of terms: 160-bit binary
     * strings. Each term is indexed so that a match on any term is considered a
     * match of the images. There might be multiple terms for an image if we were
     * unable to robustly normalize the image orientation.
     * </pre>
     */
    int getTermsCount();
    /**
     * <code>repeated bytes terms = 1;</code>
     *
     * <pre>
     * An image fingerprint is composed of a number of terms: 160-bit binary
     * strings. Each term is indexed so that a match on any term is considered a
     * match of the images. There might be multiple terms for an image if we were
     * unable to robustly normalize the image orientation.
     * </pre>
     */
    com.google.protobuf.ByteString getTerms(int index);
  }
  /**
   * Protobuf type {@code ImageFingerprint}
   */
  public static final class ImageFingerprint extends
      com.google.protobuf.GeneratedMessage
      implements ImageFingerprintOrBuilder {
    // Use ImageFingerprint.newBuilder() to construct.
    private ImageFingerprint(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ImageFingerprint(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ImageFingerprint defaultInstance;
    public static ImageFingerprint getDefaultInstance() {
      return defaultInstance;
    }

    public ImageFingerprint getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ImageFingerprint(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                terms_ = new java.util.ArrayList<com.google.protobuf.ByteString>();
                mutable_bitField0_ |= 0x00000001;
              }
              terms_.add(input.readBytes());
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          terms_ = java.util.Collections.unmodifiableList(terms_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return co.viewfinder.proto.ImageFingerprintPB.internal_static_ImageFingerprint_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return co.viewfinder.proto.ImageFingerprintPB.internal_static_ImageFingerprint_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint.class, co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint.Builder.class);
    }

    public static com.google.protobuf.Parser<ImageFingerprint> PARSER =
        new com.google.protobuf.AbstractParser<ImageFingerprint>() {
      public ImageFingerprint parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ImageFingerprint(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ImageFingerprint> getParserForType() {
      return PARSER;
    }

    // repeated bytes terms = 1;
    public static final int TERMS_FIELD_NUMBER = 1;
    private java.util.List<com.google.protobuf.ByteString> terms_;
    /**
     * <code>repeated bytes terms = 1;</code>
     *
     * <pre>
     * An image fingerprint is composed of a number of terms: 160-bit binary
     * strings. Each term is indexed so that a match on any term is considered a
     * match of the images. There might be multiple terms for an image if we were
     * unable to robustly normalize the image orientation.
     * </pre>
     */
    public java.util.List<com.google.protobuf.ByteString>
        getTermsList() {
      return terms_;
    }
    /**
     * <code>repeated bytes terms = 1;</code>
     *
     * <pre>
     * An image fingerprint is composed of a number of terms: 160-bit binary
     * strings. Each term is indexed so that a match on any term is considered a
     * match of the images. There might be multiple terms for an image if we were
     * unable to robustly normalize the image orientation.
     * </pre>
     */
    public int getTermsCount() {
      return terms_.size();
    }
    /**
     * <code>repeated bytes terms = 1;</code>
     *
     * <pre>
     * An image fingerprint is composed of a number of terms: 160-bit binary
     * strings. Each term is indexed so that a match on any term is considered a
     * match of the images. There might be multiple terms for an image if we were
     * unable to robustly normalize the image orientation.
     * </pre>
     */
    public com.google.protobuf.ByteString getTerms(int index) {
      return terms_.get(index);
    }

    private void initFields() {
      terms_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < terms_.size(); i++) {
        output.writeBytes(1, terms_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < terms_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(terms_.get(i));
        }
        size += dataSize;
        size += 1 * getTermsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ImageFingerprint}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements co.viewfinder.proto.ImageFingerprintPB.ImageFingerprintOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return co.viewfinder.proto.ImageFingerprintPB.internal_static_ImageFingerprint_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return co.viewfinder.proto.ImageFingerprintPB.internal_static_ImageFingerprint_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint.class, co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint.Builder.class);
      }

      // Construct using co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        terms_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return co.viewfinder.proto.ImageFingerprintPB.internal_static_ImageFingerprint_descriptor;
      }

      public co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint getDefaultInstanceForType() {
        return co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint.getDefaultInstance();
      }

      public co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint build() {
        co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint buildPartial() {
        co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint result = new co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          terms_ = java.util.Collections.unmodifiableList(terms_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.terms_ = terms_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint) {
          return mergeFrom((co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint other) {
        if (other == co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint.getDefaultInstance()) return this;
        if (!other.terms_.isEmpty()) {
          if (terms_.isEmpty()) {
            terms_ = other.terms_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureTermsIsMutable();
            terms_.addAll(other.terms_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (co.viewfinder.proto.ImageFingerprintPB.ImageFingerprint) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated bytes terms = 1;
      private java.util.List<com.google.protobuf.ByteString> terms_ = java.util.Collections.emptyList();
      private void ensureTermsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          terms_ = new java.util.ArrayList<com.google.protobuf.ByteString>(terms_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated bytes terms = 1;</code>
       *
       * <pre>
       * An image fingerprint is composed of a number of terms: 160-bit binary
       * strings. Each term is indexed so that a match on any term is considered a
       * match of the images. There might be multiple terms for an image if we were
       * unable to robustly normalize the image orientation.
       * </pre>
       */
      public java.util.List<com.google.protobuf.ByteString>
          getTermsList() {
        return java.util.Collections.unmodifiableList(terms_);
      }
      /**
       * <code>repeated bytes terms = 1;</code>
       *
       * <pre>
       * An image fingerprint is composed of a number of terms: 160-bit binary
       * strings. Each term is indexed so that a match on any term is considered a
       * match of the images. There might be multiple terms for an image if we were
       * unable to robustly normalize the image orientation.
       * </pre>
       */
      public int getTermsCount() {
        return terms_.size();
      }
      /**
       * <code>repeated bytes terms = 1;</code>
       *
       * <pre>
       * An image fingerprint is composed of a number of terms: 160-bit binary
       * strings. Each term is indexed so that a match on any term is considered a
       * match of the images. There might be multiple terms for an image if we were
       * unable to robustly normalize the image orientation.
       * </pre>
       */
      public com.google.protobuf.ByteString getTerms(int index) {
        return terms_.get(index);
      }
      /**
       * <code>repeated bytes terms = 1;</code>
       *
       * <pre>
       * An image fingerprint is composed of a number of terms: 160-bit binary
       * strings. Each term is indexed so that a match on any term is considered a
       * match of the images. There might be multiple terms for an image if we were
       * unable to robustly normalize the image orientation.
       * </pre>
       */
      public Builder setTerms(
          int index, com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureTermsIsMutable();
        terms_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes terms = 1;</code>
       *
       * <pre>
       * An image fingerprint is composed of a number of terms: 160-bit binary
       * strings. Each term is indexed so that a match on any term is considered a
       * match of the images. There might be multiple terms for an image if we were
       * unable to robustly normalize the image orientation.
       * </pre>
       */
      public Builder addTerms(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureTermsIsMutable();
        terms_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes terms = 1;</code>
       *
       * <pre>
       * An image fingerprint is composed of a number of terms: 160-bit binary
       * strings. Each term is indexed so that a match on any term is considered a
       * match of the images. There might be multiple terms for an image if we were
       * unable to robustly normalize the image orientation.
       * </pre>
       */
      public Builder addAllTerms(
          java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
        ensureTermsIsMutable();
        super.addAll(values, terms_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes terms = 1;</code>
       *
       * <pre>
       * An image fingerprint is composed of a number of terms: 160-bit binary
       * strings. Each term is indexed so that a match on any term is considered a
       * match of the images. There might be multiple terms for an image if we were
       * unable to robustly normalize the image orientation.
       * </pre>
       */
      public Builder clearTerms() {
        terms_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ImageFingerprint)
    }

    static {
      defaultInstance = new ImageFingerprint(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ImageFingerprint)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ImageFingerprint_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ImageFingerprint_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\026ImageFingerprint.proto\"!\n\020ImageFingerp" +
      "rint\022\r\n\005terms\030\001 \003(\014B)\n\023co.viewfinder.pro" +
      "toB\022ImageFingerprintPB"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_ImageFingerprint_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_ImageFingerprint_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ImageFingerprint_descriptor,
              new java.lang.String[] { "Terms", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
