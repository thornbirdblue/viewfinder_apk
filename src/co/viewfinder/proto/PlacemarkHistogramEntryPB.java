// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlacemarkHistogramEntry.proto

package co.viewfinder.proto;

public final class PlacemarkHistogramEntryPB {
  private PlacemarkHistogramEntryPB() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface PlacemarkHistogramEntryOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional .Placemark placemark = 1;
    /**
     * <code>optional .Placemark placemark = 1;</code>
     */
    boolean hasPlacemark();
    /**
     * <code>optional .Placemark placemark = 1;</code>
     */
    co.viewfinder.proto.PlacemarkPB.Placemark getPlacemark();
    /**
     * <code>optional .Placemark placemark = 1;</code>
     */
    co.viewfinder.proto.PlacemarkPB.PlacemarkOrBuilder getPlacemarkOrBuilder();

    // optional .Location location_sum = 2;
    /**
     * <code>optional .Location location_sum = 2;</code>
     *
     * <pre>
     * The aggregate values for latitude, longitude, accuracy, and altitude.
     * </pre>
     */
    boolean hasLocationSum();
    /**
     * <code>optional .Location location_sum = 2;</code>
     *
     * <pre>
     * The aggregate values for latitude, longitude, accuracy, and altitude.
     * </pre>
     */
    co.viewfinder.proto.LocationPB.Location getLocationSum();
    /**
     * <code>optional .Location location_sum = 2;</code>
     *
     * <pre>
     * The aggregate values for latitude, longitude, accuracy, and altitude.
     * </pre>
     */
    co.viewfinder.proto.LocationPB.LocationOrBuilder getLocationSumOrBuilder();

    // optional int32 count = 3;
    /**
     * <code>optional int32 count = 3;</code>
     *
     * <pre>
     * The total number of photo locations matching this placemark entry. The
     * location_sum divided by this count gives the average location.
     * </pre>
     */
    boolean hasCount();
    /**
     * <code>optional int32 count = 3;</code>
     *
     * <pre>
     * The total number of photo locations matching this placemark entry. The
     * location_sum divided by this count gives the average location.
     * </pre>
     */
    int getCount();

    // repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;
    /**
     * <code>repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;</code>
     */
    java.util.List<co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality> 
        getSublocalitiesList();
    /**
     * <code>repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;</code>
     */
    co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality getSublocalities(int index);
    /**
     * <code>repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;</code>
     */
    int getSublocalitiesCount();
    /**
     * <code>repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;</code>
     */
    java.util.List<? extends co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.SublocalityOrBuilder> 
        getSublocalitiesOrBuilderList();
    /**
     * <code>repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;</code>
     */
    co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.SublocalityOrBuilder getSublocalitiesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code PlacemarkHistogramEntry}
   */
  public static final class PlacemarkHistogramEntry extends
      com.google.protobuf.GeneratedMessage
      implements PlacemarkHistogramEntryOrBuilder {
    // Use PlacemarkHistogramEntry.newBuilder() to construct.
    private PlacemarkHistogramEntry(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PlacemarkHistogramEntry(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PlacemarkHistogramEntry defaultInstance;
    public static PlacemarkHistogramEntry getDefaultInstance() {
      return defaultInstance;
    }

    public PlacemarkHistogramEntry getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PlacemarkHistogramEntry(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              co.viewfinder.proto.PlacemarkPB.Placemark.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = placemark_.toBuilder();
              }
              placemark_ = input.readMessage(co.viewfinder.proto.PlacemarkPB.Placemark.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(placemark_);
                placemark_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              co.viewfinder.proto.LocationPB.Location.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = locationSum_.toBuilder();
              }
              locationSum_ = input.readMessage(co.viewfinder.proto.LocationPB.Location.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(locationSum_);
                locationSum_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              count_ = input.readInt32();
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                sublocalities_ = new java.util.ArrayList<co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality>();
                mutable_bitField0_ |= 0x00000008;
              }
              sublocalities_.add(input.readMessage(co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          sublocalities_ = java.util.Collections.unmodifiableList(sublocalities_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return co.viewfinder.proto.PlacemarkHistogramEntryPB.internal_static_PlacemarkHistogramEntry_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return co.viewfinder.proto.PlacemarkHistogramEntryPB.internal_static_PlacemarkHistogramEntry_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.class, co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Builder.class);
    }

    public static com.google.protobuf.Parser<PlacemarkHistogramEntry> PARSER =
        new com.google.protobuf.AbstractParser<PlacemarkHistogramEntry>() {
      public PlacemarkHistogramEntry parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PlacemarkHistogramEntry(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PlacemarkHistogramEntry> getParserForType() {
      return PARSER;
    }

    public interface SublocalityOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional string name = 1;
      /**
       * <code>optional string name = 1;</code>
       */
      boolean hasName();
      /**
       * <code>optional string name = 1;</code>
       */
      java.lang.String getName();
      /**
       * <code>optional string name = 1;</code>
       */
      com.google.protobuf.ByteString
          getNameBytes();

      // optional int32 count = 2;
      /**
       * <code>optional int32 count = 2;</code>
       */
      boolean hasCount();
      /**
       * <code>optional int32 count = 2;</code>
       */
      int getCount();
    }
    /**
     * Protobuf type {@code PlacemarkHistogramEntry.Sublocality}
     *
     * <pre>
     * A complete set of sublocalities with counts.
     * </pre>
     */
    public static final class Sublocality extends
        com.google.protobuf.GeneratedMessage
        implements SublocalityOrBuilder {
      // Use Sublocality.newBuilder() to construct.
      private Sublocality(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Sublocality(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Sublocality defaultInstance;
      public static Sublocality getDefaultInstance() {
        return defaultInstance;
      }

      public Sublocality getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Sublocality(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                bitField0_ |= 0x00000001;
                name_ = input.readBytes();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                count_ = input.readInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return co.viewfinder.proto.PlacemarkHistogramEntryPB.internal_static_PlacemarkHistogramEntry_Sublocality_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return co.viewfinder.proto.PlacemarkHistogramEntryPB.internal_static_PlacemarkHistogramEntry_Sublocality_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality.class, co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality.Builder.class);
      }

      public static com.google.protobuf.Parser<Sublocality> PARSER =
          new com.google.protobuf.AbstractParser<Sublocality>() {
        public Sublocality parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Sublocality(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Sublocality> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // optional string name = 1;
      public static final int NAME_FIELD_NUMBER = 1;
      private java.lang.Object name_;
      /**
       * <code>optional string name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      // optional int32 count = 2;
      public static final int COUNT_FIELD_NUMBER = 2;
      private int count_;
      /**
       * <code>optional int32 count = 2;</code>
       */
      public boolean hasCount() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 count = 2;</code>
       */
      public int getCount() {
        return count_;
      }

      private void initFields() {
        name_ = "";
        count_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBytes(1, getNameBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt32(2, count_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, getNameBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, count_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code PlacemarkHistogramEntry.Sublocality}
       *
       * <pre>
       * A complete set of sublocalities with counts.
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.SublocalityOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return co.viewfinder.proto.PlacemarkHistogramEntryPB.internal_static_PlacemarkHistogramEntry_Sublocality_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return co.viewfinder.proto.PlacemarkHistogramEntryPB.internal_static_PlacemarkHistogramEntry_Sublocality_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality.class, co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality.Builder.class);
        }

        // Construct using co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          name_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          count_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return co.viewfinder.proto.PlacemarkHistogramEntryPB.internal_static_PlacemarkHistogramEntry_Sublocality_descriptor;
        }

        public co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality getDefaultInstanceForType() {
          return co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality.getDefaultInstance();
        }

        public co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality build() {
          co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality buildPartial() {
          co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality result = new co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.name_ = name_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.count_ = count_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality) {
            return mergeFrom((co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality other) {
          if (other == co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality.getDefaultInstance()) return this;
          if (other.hasName()) {
            bitField0_ |= 0x00000001;
            name_ = other.name_;
            onChanged();
          }
          if (other.hasCount()) {
            setCount(other.getCount());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional string name = 1;
        private java.lang.Object name_ = "";
        /**
         * <code>optional string name = 1;</code>
         */
        public boolean hasName() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional string name = 1;</code>
         */
        public java.lang.String getName() {
          java.lang.Object ref = name_;
          if (!(ref instanceof java.lang.String)) {
            java.lang.String s = ((com.google.protobuf.ByteString) ref)
                .toStringUtf8();
            name_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string name = 1;</code>
         */
        public com.google.protobuf.ByteString
            getNameBytes() {
          java.lang.Object ref = name_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            name_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string name = 1;</code>
         */
        public Builder setName(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          name_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string name = 1;</code>
         */
        public Builder clearName() {
          bitField0_ = (bitField0_ & ~0x00000001);
          name_ = getDefaultInstance().getName();
          onChanged();
          return this;
        }
        /**
         * <code>optional string name = 1;</code>
         */
        public Builder setNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          name_ = value;
          onChanged();
          return this;
        }

        // optional int32 count = 2;
        private int count_ ;
        /**
         * <code>optional int32 count = 2;</code>
         */
        public boolean hasCount() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional int32 count = 2;</code>
         */
        public int getCount() {
          return count_;
        }
        /**
         * <code>optional int32 count = 2;</code>
         */
        public Builder setCount(int value) {
          bitField0_ |= 0x00000002;
          count_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 count = 2;</code>
         */
        public Builder clearCount() {
          bitField0_ = (bitField0_ & ~0x00000002);
          count_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:PlacemarkHistogramEntry.Sublocality)
      }

      static {
        defaultInstance = new Sublocality(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:PlacemarkHistogramEntry.Sublocality)
    }

    private int bitField0_;
    // optional .Placemark placemark = 1;
    public static final int PLACEMARK_FIELD_NUMBER = 1;
    private co.viewfinder.proto.PlacemarkPB.Placemark placemark_;
    /**
     * <code>optional .Placemark placemark = 1;</code>
     */
    public boolean hasPlacemark() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .Placemark placemark = 1;</code>
     */
    public co.viewfinder.proto.PlacemarkPB.Placemark getPlacemark() {
      return placemark_;
    }
    /**
     * <code>optional .Placemark placemark = 1;</code>
     */
    public co.viewfinder.proto.PlacemarkPB.PlacemarkOrBuilder getPlacemarkOrBuilder() {
      return placemark_;
    }

    // optional .Location location_sum = 2;
    public static final int LOCATION_SUM_FIELD_NUMBER = 2;
    private co.viewfinder.proto.LocationPB.Location locationSum_;
    /**
     * <code>optional .Location location_sum = 2;</code>
     *
     * <pre>
     * The aggregate values for latitude, longitude, accuracy, and altitude.
     * </pre>
     */
    public boolean hasLocationSum() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .Location location_sum = 2;</code>
     *
     * <pre>
     * The aggregate values for latitude, longitude, accuracy, and altitude.
     * </pre>
     */
    public co.viewfinder.proto.LocationPB.Location getLocationSum() {
      return locationSum_;
    }
    /**
     * <code>optional .Location location_sum = 2;</code>
     *
     * <pre>
     * The aggregate values for latitude, longitude, accuracy, and altitude.
     * </pre>
     */
    public co.viewfinder.proto.LocationPB.LocationOrBuilder getLocationSumOrBuilder() {
      return locationSum_;
    }

    // optional int32 count = 3;
    public static final int COUNT_FIELD_NUMBER = 3;
    private int count_;
    /**
     * <code>optional int32 count = 3;</code>
     *
     * <pre>
     * The total number of photo locations matching this placemark entry. The
     * location_sum divided by this count gives the average location.
     * </pre>
     */
    public boolean hasCount() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 count = 3;</code>
     *
     * <pre>
     * The total number of photo locations matching this placemark entry. The
     * location_sum divided by this count gives the average location.
     * </pre>
     */
    public int getCount() {
      return count_;
    }

    // repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;
    public static final int SUBLOCALITIES_FIELD_NUMBER = 4;
    private java.util.List<co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality> sublocalities_;
    /**
     * <code>repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;</code>
     */
    public java.util.List<co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality> getSublocalitiesList() {
      return sublocalities_;
    }
    /**
     * <code>repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;</code>
     */
    public java.util.List<? extends co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.SublocalityOrBuilder> 
        getSublocalitiesOrBuilderList() {
      return sublocalities_;
    }
    /**
     * <code>repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;</code>
     */
    public int getSublocalitiesCount() {
      return sublocalities_.size();
    }
    /**
     * <code>repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;</code>
     */
    public co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality getSublocalities(int index) {
      return sublocalities_.get(index);
    }
    /**
     * <code>repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;</code>
     */
    public co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.SublocalityOrBuilder getSublocalitiesOrBuilder(
        int index) {
      return sublocalities_.get(index);
    }

    private void initFields() {
      placemark_ = co.viewfinder.proto.PlacemarkPB.Placemark.getDefaultInstance();
      locationSum_ = co.viewfinder.proto.LocationPB.Location.getDefaultInstance();
      count_ = 0;
      sublocalities_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, placemark_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, locationSum_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, count_);
      }
      for (int i = 0; i < sublocalities_.size(); i++) {
        output.writeMessage(4, sublocalities_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, placemark_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, locationSum_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, count_);
      }
      for (int i = 0; i < sublocalities_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, sublocalities_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code PlacemarkHistogramEntry}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntryOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return co.viewfinder.proto.PlacemarkHistogramEntryPB.internal_static_PlacemarkHistogramEntry_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return co.viewfinder.proto.PlacemarkHistogramEntryPB.internal_static_PlacemarkHistogramEntry_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.class, co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Builder.class);
      }

      // Construct using co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPlacemarkFieldBuilder();
          getLocationSumFieldBuilder();
          getSublocalitiesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (placemarkBuilder_ == null) {
          placemark_ = co.viewfinder.proto.PlacemarkPB.Placemark.getDefaultInstance();
        } else {
          placemarkBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (locationSumBuilder_ == null) {
          locationSum_ = co.viewfinder.proto.LocationPB.Location.getDefaultInstance();
        } else {
          locationSumBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        count_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (sublocalitiesBuilder_ == null) {
          sublocalities_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          sublocalitiesBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return co.viewfinder.proto.PlacemarkHistogramEntryPB.internal_static_PlacemarkHistogramEntry_descriptor;
      }

      public co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry getDefaultInstanceForType() {
        return co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.getDefaultInstance();
      }

      public co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry build() {
        co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry buildPartial() {
        co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry result = new co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (placemarkBuilder_ == null) {
          result.placemark_ = placemark_;
        } else {
          result.placemark_ = placemarkBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (locationSumBuilder_ == null) {
          result.locationSum_ = locationSum_;
        } else {
          result.locationSum_ = locationSumBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.count_ = count_;
        if (sublocalitiesBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            sublocalities_ = java.util.Collections.unmodifiableList(sublocalities_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.sublocalities_ = sublocalities_;
        } else {
          result.sublocalities_ = sublocalitiesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry) {
          return mergeFrom((co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry other) {
        if (other == co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.getDefaultInstance()) return this;
        if (other.hasPlacemark()) {
          mergePlacemark(other.getPlacemark());
        }
        if (other.hasLocationSum()) {
          mergeLocationSum(other.getLocationSum());
        }
        if (other.hasCount()) {
          setCount(other.getCount());
        }
        if (sublocalitiesBuilder_ == null) {
          if (!other.sublocalities_.isEmpty()) {
            if (sublocalities_.isEmpty()) {
              sublocalities_ = other.sublocalities_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureSublocalitiesIsMutable();
              sublocalities_.addAll(other.sublocalities_);
            }
            onChanged();
          }
        } else {
          if (!other.sublocalities_.isEmpty()) {
            if (sublocalitiesBuilder_.isEmpty()) {
              sublocalitiesBuilder_.dispose();
              sublocalitiesBuilder_ = null;
              sublocalities_ = other.sublocalities_;
              bitField0_ = (bitField0_ & ~0x00000008);
              sublocalitiesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSublocalitiesFieldBuilder() : null;
            } else {
              sublocalitiesBuilder_.addAllMessages(other.sublocalities_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional .Placemark placemark = 1;
      private co.viewfinder.proto.PlacemarkPB.Placemark placemark_ = co.viewfinder.proto.PlacemarkPB.Placemark.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          co.viewfinder.proto.PlacemarkPB.Placemark, co.viewfinder.proto.PlacemarkPB.Placemark.Builder, co.viewfinder.proto.PlacemarkPB.PlacemarkOrBuilder> placemarkBuilder_;
      /**
       * <code>optional .Placemark placemark = 1;</code>
       */
      public boolean hasPlacemark() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .Placemark placemark = 1;</code>
       */
      public co.viewfinder.proto.PlacemarkPB.Placemark getPlacemark() {
        if (placemarkBuilder_ == null) {
          return placemark_;
        } else {
          return placemarkBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .Placemark placemark = 1;</code>
       */
      public Builder setPlacemark(co.viewfinder.proto.PlacemarkPB.Placemark value) {
        if (placemarkBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          placemark_ = value;
          onChanged();
        } else {
          placemarkBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .Placemark placemark = 1;</code>
       */
      public Builder setPlacemark(
          co.viewfinder.proto.PlacemarkPB.Placemark.Builder builderForValue) {
        if (placemarkBuilder_ == null) {
          placemark_ = builderForValue.build();
          onChanged();
        } else {
          placemarkBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .Placemark placemark = 1;</code>
       */
      public Builder mergePlacemark(co.viewfinder.proto.PlacemarkPB.Placemark value) {
        if (placemarkBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              placemark_ != co.viewfinder.proto.PlacemarkPB.Placemark.getDefaultInstance()) {
            placemark_ =
              co.viewfinder.proto.PlacemarkPB.Placemark.newBuilder(placemark_).mergeFrom(value).buildPartial();
          } else {
            placemark_ = value;
          }
          onChanged();
        } else {
          placemarkBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .Placemark placemark = 1;</code>
       */
      public Builder clearPlacemark() {
        if (placemarkBuilder_ == null) {
          placemark_ = co.viewfinder.proto.PlacemarkPB.Placemark.getDefaultInstance();
          onChanged();
        } else {
          placemarkBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .Placemark placemark = 1;</code>
       */
      public co.viewfinder.proto.PlacemarkPB.Placemark.Builder getPlacemarkBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getPlacemarkFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .Placemark placemark = 1;</code>
       */
      public co.viewfinder.proto.PlacemarkPB.PlacemarkOrBuilder getPlacemarkOrBuilder() {
        if (placemarkBuilder_ != null) {
          return placemarkBuilder_.getMessageOrBuilder();
        } else {
          return placemark_;
        }
      }
      /**
       * <code>optional .Placemark placemark = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          co.viewfinder.proto.PlacemarkPB.Placemark, co.viewfinder.proto.PlacemarkPB.Placemark.Builder, co.viewfinder.proto.PlacemarkPB.PlacemarkOrBuilder> 
          getPlacemarkFieldBuilder() {
        if (placemarkBuilder_ == null) {
          placemarkBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              co.viewfinder.proto.PlacemarkPB.Placemark, co.viewfinder.proto.PlacemarkPB.Placemark.Builder, co.viewfinder.proto.PlacemarkPB.PlacemarkOrBuilder>(
                  placemark_,
                  getParentForChildren(),
                  isClean());
          placemark_ = null;
        }
        return placemarkBuilder_;
      }

      // optional .Location location_sum = 2;
      private co.viewfinder.proto.LocationPB.Location locationSum_ = co.viewfinder.proto.LocationPB.Location.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          co.viewfinder.proto.LocationPB.Location, co.viewfinder.proto.LocationPB.Location.Builder, co.viewfinder.proto.LocationPB.LocationOrBuilder> locationSumBuilder_;
      /**
       * <code>optional .Location location_sum = 2;</code>
       *
       * <pre>
       * The aggregate values for latitude, longitude, accuracy, and altitude.
       * </pre>
       */
      public boolean hasLocationSum() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .Location location_sum = 2;</code>
       *
       * <pre>
       * The aggregate values for latitude, longitude, accuracy, and altitude.
       * </pre>
       */
      public co.viewfinder.proto.LocationPB.Location getLocationSum() {
        if (locationSumBuilder_ == null) {
          return locationSum_;
        } else {
          return locationSumBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .Location location_sum = 2;</code>
       *
       * <pre>
       * The aggregate values for latitude, longitude, accuracy, and altitude.
       * </pre>
       */
      public Builder setLocationSum(co.viewfinder.proto.LocationPB.Location value) {
        if (locationSumBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          locationSum_ = value;
          onChanged();
        } else {
          locationSumBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .Location location_sum = 2;</code>
       *
       * <pre>
       * The aggregate values for latitude, longitude, accuracy, and altitude.
       * </pre>
       */
      public Builder setLocationSum(
          co.viewfinder.proto.LocationPB.Location.Builder builderForValue) {
        if (locationSumBuilder_ == null) {
          locationSum_ = builderForValue.build();
          onChanged();
        } else {
          locationSumBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .Location location_sum = 2;</code>
       *
       * <pre>
       * The aggregate values for latitude, longitude, accuracy, and altitude.
       * </pre>
       */
      public Builder mergeLocationSum(co.viewfinder.proto.LocationPB.Location value) {
        if (locationSumBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              locationSum_ != co.viewfinder.proto.LocationPB.Location.getDefaultInstance()) {
            locationSum_ =
              co.viewfinder.proto.LocationPB.Location.newBuilder(locationSum_).mergeFrom(value).buildPartial();
          } else {
            locationSum_ = value;
          }
          onChanged();
        } else {
          locationSumBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .Location location_sum = 2;</code>
       *
       * <pre>
       * The aggregate values for latitude, longitude, accuracy, and altitude.
       * </pre>
       */
      public Builder clearLocationSum() {
        if (locationSumBuilder_ == null) {
          locationSum_ = co.viewfinder.proto.LocationPB.Location.getDefaultInstance();
          onChanged();
        } else {
          locationSumBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .Location location_sum = 2;</code>
       *
       * <pre>
       * The aggregate values for latitude, longitude, accuracy, and altitude.
       * </pre>
       */
      public co.viewfinder.proto.LocationPB.Location.Builder getLocationSumBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getLocationSumFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .Location location_sum = 2;</code>
       *
       * <pre>
       * The aggregate values for latitude, longitude, accuracy, and altitude.
       * </pre>
       */
      public co.viewfinder.proto.LocationPB.LocationOrBuilder getLocationSumOrBuilder() {
        if (locationSumBuilder_ != null) {
          return locationSumBuilder_.getMessageOrBuilder();
        } else {
          return locationSum_;
        }
      }
      /**
       * <code>optional .Location location_sum = 2;</code>
       *
       * <pre>
       * The aggregate values for latitude, longitude, accuracy, and altitude.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          co.viewfinder.proto.LocationPB.Location, co.viewfinder.proto.LocationPB.Location.Builder, co.viewfinder.proto.LocationPB.LocationOrBuilder> 
          getLocationSumFieldBuilder() {
        if (locationSumBuilder_ == null) {
          locationSumBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              co.viewfinder.proto.LocationPB.Location, co.viewfinder.proto.LocationPB.Location.Builder, co.viewfinder.proto.LocationPB.LocationOrBuilder>(
                  locationSum_,
                  getParentForChildren(),
                  isClean());
          locationSum_ = null;
        }
        return locationSumBuilder_;
      }

      // optional int32 count = 3;
      private int count_ ;
      /**
       * <code>optional int32 count = 3;</code>
       *
       * <pre>
       * The total number of photo locations matching this placemark entry. The
       * location_sum divided by this count gives the average location.
       * </pre>
       */
      public boolean hasCount() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 count = 3;</code>
       *
       * <pre>
       * The total number of photo locations matching this placemark entry. The
       * location_sum divided by this count gives the average location.
       * </pre>
       */
      public int getCount() {
        return count_;
      }
      /**
       * <code>optional int32 count = 3;</code>
       *
       * <pre>
       * The total number of photo locations matching this placemark entry. The
       * location_sum divided by this count gives the average location.
       * </pre>
       */
      public Builder setCount(int value) {
        bitField0_ |= 0x00000004;
        count_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 count = 3;</code>
       *
       * <pre>
       * The total number of photo locations matching this placemark entry. The
       * location_sum divided by this count gives the average location.
       * </pre>
       */
      public Builder clearCount() {
        bitField0_ = (bitField0_ & ~0x00000004);
        count_ = 0;
        onChanged();
        return this;
      }

      // repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;
      private java.util.List<co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality> sublocalities_ =
        java.util.Collections.emptyList();
      private void ensureSublocalitiesIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          sublocalities_ = new java.util.ArrayList<co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality>(sublocalities_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality, co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality.Builder, co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.SublocalityOrBuilder> sublocalitiesBuilder_;

      /**
       * <code>repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;</code>
       */
      public java.util.List<co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality> getSublocalitiesList() {
        if (sublocalitiesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(sublocalities_);
        } else {
          return sublocalitiesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;</code>
       */
      public int getSublocalitiesCount() {
        if (sublocalitiesBuilder_ == null) {
          return sublocalities_.size();
        } else {
          return sublocalitiesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;</code>
       */
      public co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality getSublocalities(int index) {
        if (sublocalitiesBuilder_ == null) {
          return sublocalities_.get(index);
        } else {
          return sublocalitiesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;</code>
       */
      public Builder setSublocalities(
          int index, co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality value) {
        if (sublocalitiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSublocalitiesIsMutable();
          sublocalities_.set(index, value);
          onChanged();
        } else {
          sublocalitiesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;</code>
       */
      public Builder setSublocalities(
          int index, co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality.Builder builderForValue) {
        if (sublocalitiesBuilder_ == null) {
          ensureSublocalitiesIsMutable();
          sublocalities_.set(index, builderForValue.build());
          onChanged();
        } else {
          sublocalitiesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;</code>
       */
      public Builder addSublocalities(co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality value) {
        if (sublocalitiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSublocalitiesIsMutable();
          sublocalities_.add(value);
          onChanged();
        } else {
          sublocalitiesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;</code>
       */
      public Builder addSublocalities(
          int index, co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality value) {
        if (sublocalitiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSublocalitiesIsMutable();
          sublocalities_.add(index, value);
          onChanged();
        } else {
          sublocalitiesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;</code>
       */
      public Builder addSublocalities(
          co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality.Builder builderForValue) {
        if (sublocalitiesBuilder_ == null) {
          ensureSublocalitiesIsMutable();
          sublocalities_.add(builderForValue.build());
          onChanged();
        } else {
          sublocalitiesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;</code>
       */
      public Builder addSublocalities(
          int index, co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality.Builder builderForValue) {
        if (sublocalitiesBuilder_ == null) {
          ensureSublocalitiesIsMutable();
          sublocalities_.add(index, builderForValue.build());
          onChanged();
        } else {
          sublocalitiesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;</code>
       */
      public Builder addAllSublocalities(
          java.lang.Iterable<? extends co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality> values) {
        if (sublocalitiesBuilder_ == null) {
          ensureSublocalitiesIsMutable();
          super.addAll(values, sublocalities_);
          onChanged();
        } else {
          sublocalitiesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;</code>
       */
      public Builder clearSublocalities() {
        if (sublocalitiesBuilder_ == null) {
          sublocalities_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          sublocalitiesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;</code>
       */
      public Builder removeSublocalities(int index) {
        if (sublocalitiesBuilder_ == null) {
          ensureSublocalitiesIsMutable();
          sublocalities_.remove(index);
          onChanged();
        } else {
          sublocalitiesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;</code>
       */
      public co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality.Builder getSublocalitiesBuilder(
          int index) {
        return getSublocalitiesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;</code>
       */
      public co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.SublocalityOrBuilder getSublocalitiesOrBuilder(
          int index) {
        if (sublocalitiesBuilder_ == null) {
          return sublocalities_.get(index);  } else {
          return sublocalitiesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;</code>
       */
      public java.util.List<? extends co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.SublocalityOrBuilder> 
           getSublocalitiesOrBuilderList() {
        if (sublocalitiesBuilder_ != null) {
          return sublocalitiesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(sublocalities_);
        }
      }
      /**
       * <code>repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;</code>
       */
      public co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality.Builder addSublocalitiesBuilder() {
        return getSublocalitiesFieldBuilder().addBuilder(
            co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality.getDefaultInstance());
      }
      /**
       * <code>repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;</code>
       */
      public co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality.Builder addSublocalitiesBuilder(
          int index) {
        return getSublocalitiesFieldBuilder().addBuilder(
            index, co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality.getDefaultInstance());
      }
      /**
       * <code>repeated .PlacemarkHistogramEntry.Sublocality sublocalities = 4;</code>
       */
      public java.util.List<co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality.Builder> 
           getSublocalitiesBuilderList() {
        return getSublocalitiesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality, co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality.Builder, co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.SublocalityOrBuilder> 
          getSublocalitiesFieldBuilder() {
        if (sublocalitiesBuilder_ == null) {
          sublocalitiesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality, co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.Sublocality.Builder, co.viewfinder.proto.PlacemarkHistogramEntryPB.PlacemarkHistogramEntry.SublocalityOrBuilder>(
                  sublocalities_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          sublocalities_ = null;
        }
        return sublocalitiesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:PlacemarkHistogramEntry)
    }

    static {
      defaultInstance = new PlacemarkHistogramEntry(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:PlacemarkHistogramEntry)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_PlacemarkHistogramEntry_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_PlacemarkHistogramEntry_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_PlacemarkHistogramEntry_Sublocality_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_PlacemarkHistogramEntry_Sublocality_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\035PlacemarkHistogramEntry.proto\032\016Locatio" +
      "n.proto\032\017Placemark.proto\"\321\001\n\027PlacemarkHi" +
      "stogramEntry\022\035\n\tplacemark\030\001 \001(\0132\n.Placem" +
      "ark\022\037\n\014location_sum\030\002 \001(\0132\t.Location\022\r\n\005" +
      "count\030\003 \001(\005\022;\n\rsublocalities\030\004 \003(\0132$.Pla" +
      "cemarkHistogramEntry.Sublocality\032*\n\013Subl" +
      "ocality\022\014\n\004name\030\001 \001(\t\022\r\n\005count\030\002 \001(\005B0\n\023" +
      "co.viewfinder.protoB\031PlacemarkHistogramE" +
      "ntryPB"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_PlacemarkHistogramEntry_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_PlacemarkHistogramEntry_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_PlacemarkHistogramEntry_descriptor,
              new java.lang.String[] { "Placemark", "LocationSum", "Count", "Sublocalities", });
          internal_static_PlacemarkHistogramEntry_Sublocality_descriptor =
            internal_static_PlacemarkHistogramEntry_descriptor.getNestedTypes().get(0);
          internal_static_PlacemarkHistogramEntry_Sublocality_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_PlacemarkHistogramEntry_Sublocality_descriptor,
              new java.lang.String[] { "Name", "Count", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          co.viewfinder.proto.LocationPB.getDescriptor(),
          co.viewfinder.proto.PlacemarkPB.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
